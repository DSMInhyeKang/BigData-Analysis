# 3주차 과제(프로그래머스 문제풀이)



## 두 정수 사이의 합(12912) https://school.programmers.co.kr/learn/courses/30/lessons/12912

# 문제 설명
# 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요. 
# 예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.
# 제한 조건
# a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
# a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
# a와 b의 대소관계는 정해져있지 않습니다.
# 입출력 예
# a	b	return
# 3	5	12
# 3	3	3
# 5	3	12

def solution(a, b):
    return sum(list(range(min(a,b), max(a,b)+1))) #list에 넣어도 되고 안 넣어도 됨 / min(a,b) == 둘 중에 작은 값, max(a,b) 둘 중에 큰 값



## 핸드폰 번호 가리기(12948) https://school.programmers.co.kr/learn/courses/30/lessons/12948

# 문제 설명
# 프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.
# 전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.
# 제한 조건
# phone_number는 길이 4 이상, 20이하인 문자열입니다.
# 입출력 예
# phone_number	return
# "01033334444"	"*******4444"
# "027778888"	"*****8888"

def solution(num):
    return "*" * (len(num) - 4) + num[-4:] #맨 끝자리가 -1부터 작아지므로 끝에서 네 번째 자리까지 하면 -4 (slicing)



## 없는 숫자 더하기(86051) https://school.programmers.co.kr/learn/courses/30/lessons/86051

# 문제 설명
# 0부터 9까지의 숫자 중 일부가 들어있는 정수 배열 numbers가 매개변수로 주어집니다. numbers에서 찾을 수 없는 0부터 9까지의 숫자를 모두 찾아 더한 수를 return 하도록 solution 함수를 완성해주세요.
# 제한사항
# 1 ≤ numbers의 길이 ≤ 9
# 0 ≤ numbers의 모든 원소 ≤ 9
# numbers의 모든 원소는 서로 다릅니다.
# 입출력 예
# numbers	result
# [1,2,3,4,6,7,8,0]	14
# [5,8,4,0,6,7,9]	6
# 입출력 예 설명
# 입출력 예 #1
# 5, 9가 numbers에 없으므로, 5 + 9 = 14를 return 해야 합니다.
# 입출력 예 #2
# 1, 2, 3이 numbers에 없으므로, 1 + 2 + 3 = 6을 return 해야 합니다.

def solution(numbers):
    num = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    return sum(set(num) - set(numbers)) # 그냥 0~9까지 합이 45니까 return sum(45 - set(numbers))해도 됨



## 나누어 떨어지는 숫자 배열(12910) https://school.programmers.co.kr/learn/courses/30/lessons/12910

# 문제 설명
# array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.
# divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.
# 제한사항
# arr은 자연수를 담은 배열입니다.
# 정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.
# divisor는 자연수입니다.
# array는 길이 1 이상인 배열입니다.
# 입출력 예
# arr	divisor	return
# [5, 9, 7, 10]	5	[5, 10]
# [2, 36, 1, 3]	1	[1, 2, 3, 36]
# [3,2,6]	10	[-1]
# 입출력 예 설명
# 입출력 예#1
# arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.
# 입출력 예#2
# arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.
# 입출력 예#3
# 3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다.

def solution(arr, divisor):
    return (sorted([n for n in arr if not (n%divisor)]) or [-1]) #논리연산자 && || ! 아니고 and or not임 / sorted는 정렬할 대상이 뒤에 바로 오고 .sort()는 메소드 / if (n%2) == 0 원래 의미


## 두 개 뽑아서 더하기(68644) https://school.programmers.co.kr/learn/courses/30/lessons/68644

# 문제 설명
# 정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.
# 제한사항
# numbers의 길이는 2 이상 100 이하입니다.
# numbers의 모든 수는 0 이상 100 이하입니다.
# 입출력 예
# numbers	result
# [2,1,3,4,1]	[2,3,4,5,6,7]
# [5,0,2,7]	[2,5,7,9,12]
# 입출력 예 설명
# 입출력 예 #1
# 2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
# 3 = 2 + 1 입니다.
# 4 = 1 + 3 입니다.
# 5 = 1 + 4 = 2 + 3 입니다.
# 6 = 2 + 4 입니다.
# 7 = 3 + 4 입니다.
# 따라서 [2,3,4,5,6,7] 을 return 해야 합니다.
# 입출력 예 #2
# 2 = 0 + 2 입니다.
# 5 = 5 + 0 입니다.
# 7 = 0 + 7 = 5 + 2 입니다.
# 9 = 2 + 7 입니다.
# 12 = 5 + 7 입니다.
# 따라서 [2,5,7,9,12] 를 return 해야 합니다.

import itertools # from itertools import combinations로 임포트하면 list 안에서 combinations만 써도 됨

def solution(numbers):
    answer = set()
    
    for i in list(itertools.combinations(numbers, 2)):
        answer.add(sum(i))
    
    return sorted(answer)



## 푸드 파이트 대회(134240) https://school.programmers.co.kr/learn/courses/30/lessons/134240

# 문제 설명
# 수웅이는 매달 주어진 음식을 빨리 먹는 푸드 파이트 대회를 개최합니다. 이 대회에서 선수들은 1대 1로 대결하며, 매 대결마다 음식의 종류와 양이 바뀝니다. 대결은 준비된 음식들을 일렬로 배치한 뒤, 한 선수는 제일 왼쪽에 있는 음식부터 오른쪽으로, 다른 선수는 제일 오른쪽에 있는 음식부터 왼쪽으로 순서대로 먹는 방식으로 진행됩니다. 중앙에는 물을 배치하고, 물을 먼저 먹는 선수가 승리하게 됩니다.
# 이때, 대회의 공정성을 위해 두 선수가 먹는 음식의 종류와 양이 같아야 하며, 음식을 먹는 순서도 같아야 합니다. 또한, 이번 대회부터는 칼로리가 낮은 음식을 먼저 먹을 수 있게 배치하여 선수들이 음식을 더 잘 먹을 수 있게 하려고 합니다. 이번 대회를 위해 수웅이는 음식을 주문했는데, 대회의 조건을 고려하지 않고 음식을 주문하여 몇 개의 음식은 대회에 사용하지 못하게 되었습니다.
# 예를 들어, 3가지의 음식이 준비되어 있으며, 칼로리가 적은 순서대로 1번 음식을 3개, 2번 음식을 4개, 3번 음식을 6개 준비했으며, 물을 편의상 0번 음식이라고 칭한다면, 두 선수는 1번 음식 1개, 2번 음식 2개, 3번 음식 3개씩을 먹게 되므로 음식의 배치는 "1223330333221"이 됩니다. 따라서 1번 음식 1개는 대회에 사용하지 못합니다.
# 수웅이가 준비한 음식의 양을 칼로리가 적은 순서대로 나타내는 정수 배열 food가 주어졌을 때, 대회를 위한 음식의 배치를 나타내는 문자열을 return 하는 solution 함수를 완성해주세요.
# 제한사항
# 2 ≤ food의 길이 ≤ 9
# 1 ≤ food의 각 원소 ≤ 1,000
# food에는 칼로리가 적은 순서대로 음식의 양이 담겨 있습니다.
# food[i]는 i번 음식의 수입니다.
# food[0]은 수웅이가 준비한 물의 양이며, 항상 1입니다.
# 정답의 길이가 3 이상인 경우만 입력으로 주어집니다.
# 입출력 예
# food	result
# [1, 3, 4, 6]	"1223330333221"
# [1, 7, 1, 2]	"111303111"
# 입출력 예 설명
# 입출력 예 #1
# 문제 예시와 같습니다.
# 입출력 예 #1
# 두 선수는 1번 음식 3개, 3번 음식 1개를 먹게 되므로 음식의 배치는 "111303111"입니다.

from itertools import chain

def solution(food):
    answer = ''
    
    for i in range(1, len(food)):
        answer += str(i)*(food[i]//2) # // --> 파이썬 몫 연산자
        
    return ''.join(map(str, chain(answer, [0], answer[::-1]))) #[::] - Extended Slices, [1::-1] 1번째 인덱스부터 끝까지 -1(역순)으로 정렬



## 모스부호 (1)(120838) https://school.programmers.co.kr/learn/courses/30/lessons/120838

# 문제 설명
# 머쓱이는 친구에게 모스부호를 이용한 편지를 받았습니다. 그냥은 읽을 수 없어 이를 해독하는 프로그램을 만들려고 합니다. 문자열 letter가 매개변수로 주어질 때, letter를 영어 소문자로 바꾼 문자열을 return 하도록 solution 함수를 완성해보세요.
# 모스부호는 다음과 같습니다.
# morse = { 
#     '.-':'a','-...':'b','-.-.':'c','-..':'d','.':'e','..-.':'f',
#     '--.':'g','....':'h','..':'i','.---':'j','-.-':'k','.-..':'l',
#     '--':'m','-.':'n','---':'o','.--.':'p','--.-':'q','.-.':'r',
#     '...':'s','-':'t','..-':'u','...-':'v','.--':'w','-..-':'x',
#     '-.--':'y','--..':'z'
# }
# 제한사항
# 1 ≤ letter의 길이 ≤ 1,000
# return값은 소문자입니다.
# letter의 모스부호는 공백으로 나누어져 있습니다.
# letter에 공백은 연속으로 두 개 이상 존재하지 않습니다.
# 해독할 수 없는 편지는 주어지지 않습니다.
# 편지의 시작과 끝에는 공백이 없습니다.
# 입출력 예
# letter	result
# ".... . .-.. .-.. ---"	"hello"
# ".--. -.-- - .... --- -."	"python"
# 입출력 예 설명
# 입출력 예 #1
# .... = h
# . = e
# .-.. = l
# .-.. = l
# --- = o
# 따라서 "hello"를 return 합니다.
# 입출력 예 #2
# .--. = p
# -.-- = y
# - = t
# .... = h
# --- = o
# -. = n
# 따라서 "python"을 return 합니다.

def solution(letter):
    morse = { 
        '.-':'a','-...':'b','-.-.':'c','-..':'d','.':'e','..-.':'f',
        '--.':'g','....':'h','..':'i','.---':'j','-.-':'k','.-..':'l',
        '--':'m','-.':'n','---':'o','.--.':'p','--.-':'q','.-.':'r',
        '...':'s','-':'t','..-':'u','...-':'v','.--':'w','-..-':'x',
        '-.--':'y','--..':'z'
    } # 딕셔너리(dict)
    
    return ''.join(morse[i] for i in letter.split(' '))